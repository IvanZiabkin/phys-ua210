import numpy as npfrom timeit import default_timer as timport warnings#Problem 2#Necessary variables for both attemptsL = 50L_iter = np.array(range(-L, L))warnings.filterwarnings("ignore")#for loop methodstart = t()summed = 0for a in L_iter:    for b in L_iter:        for c in L_iter:            if(a==0 and b==0 and c==0):                 continue            if((a+b+c)%2 == 0):                summed = summed+(1/(np.sqrt(a**2+b**2+c**2)))            else:                summed = summed-(1/(np.sqrt(a**2+b**2+c**2)))print("Magdelung Constant value: ")print(summed)end = t()print("Processing Time (for loop method): ")print(end-start)#other methodstart = t()x, y, z = np.meshgrid(L_iter**2, L_iter**2, L_iter**2)first_set = x+y+z #squared above, doesn't alter even/odd ordernegs = first_set%2 #manually "masking" for negatives w/ an array of +/-1snegs = negs * (-1) o = np.ones((2*L, 2*L, 2*L))omask = negs>-1negmask = negs+omaskfinal_set = (np.sqrt(first_set))*negmaskfinal_set = 1/final_setfinal_set[L,L,L] = 0 #remove inf resulting from (0,0,0) before sumprint("Magdelung Constant value: ")print(sum(sum(sum(final_set))))end = t()print("Processing Time (other method): ")print(end-start)